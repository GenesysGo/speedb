name: CI

on: 
  #push:
  workflow_dispatch:
  workflow_call:
  pull_request_review:
    types: [submitted]

  
permissions: write-all

jobs:
  #Sanity:
    #uses: speedb-io/speedb/.github/workflows/sanity_check.yml@main

  Check-Licence-And-History:
    #if: ${{  github.event_name == 'pull_request_review' }}
    uses: ./.github/workflows/check_license_and_history.yml
  
  Build:
    needs: [Check-Licence-And-History]
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    #runs-on: [self-hosted, ubuntu, asrunner]
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
          - name: verify build
            command: cmake ..  -GNinja
          - name: optimized build
            command: cmake .. -DCMAKE_BUILD_TYPE=Release  -GNinja
          - mame: clang build
            command: CC=clang CXX=clang++ cmake ..  -GNinja
    container:
      image: alpine:3.14

    steps:
    - name: Pre-build
      run: |
        env
        rm -rf /usr/share/dotnet || echo ""
        df -h
        apk add git
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        apk add bash python3 py3-pip clang clang-extra-tools shellcheck gcc g++ cmake ninja ccache \
        openjdk10 gflags-dev snappy-dev lz4-dev bzip2-dev zstd-dev zlib-dev linux-headers openssh-client tar readline-dev
        python3 -m pip install lint-diffs flake8
        
        
    - name: Checkout
      uses: actions/checkout@v3 
    - run: git config --system --add safe.directory /__w/speedb/speedb
      
      
    - name: Prepare ccache timestamp
      id: ccache_cache_timestamp
      shell: cmake -P {0}
      run: |
        string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
        message("::set-output name=timestamp::${current_date}")
        
        
    - name: ccache cache files
      uses: actions/cache@v3.3.2
      with:
        path: ~/.ccache
        key: ${{runner.os}}-ccache-${{steps.ccache_cache_timestamp.outputs.timestamp}}
        restore-keys: |
          ${{runner.os}}-ccache-
        
      
    - name: ${{ matrix.name }}
      run: |
        #echo "try git config"
        #git config --global --list
        #echo "done git config"
        if [ -d "$GITHUB_WORKSPACE/build" ]; then
          echo >&2 "error: the build directory should not exist" && false NIK 
        fi
        if [ -d "~/.ccache" ]; then
          echo "Already exists"
        else
          mkdir -p ~/.ccache
          ls ~ | grep cache || echo ""
          touch ~/.ccache/ccache.txt
          echo "aaa" > ~/.ccache/ccache.txt
          ls ~/.ccache
          cat ~/.ccache/ccache.txt
        fi
        mkdir -p "$GITHUB_WORKSPACE/build"
        cd "$GITHUB_WORKSPACE/build"
        export "CCACHE_BASEDIR=$HOME"
        export "CCACHE_DIR=$HOME/.ccache"
        export "CCACHE_COMPILERCHECK=content"
        echo "MAtrix command - "  ${{ matrix.command }}
        ${{ matrix.command }} -DPORTABLE=1 -DWITH_GFLAGS=1 \
        -DWITH_ZLIB=1 -DWITH_SNAPPY=1 -DWITH_BZ2=1 -DWITH_LZ4=1 -DWITH_ZSTD=1 \
        -DWITH_JNI=1 -DJAVA_HOME=/usr/lib/jvm/default-jvm \
        -DWITH_BENCHMARK_TOOLS=1 -DWITH_CORE_TOOLS=1 -DWITH_TOOLS=1 \
        -DWITH_TESTS=1 -DWITH_ALL_TESTS=1 -DWITH_EXAMPLES=1
        echo "starting ninja"
        ninja
        
  #Performance:
    #if: ${{ github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release') }}
    #needs: [Build]
    #uses: speedb-io/speedb/.github/workflows/perf-test.yml@main
  
  QA-Tests:
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    needs: [Build]
    uses: speedb-io/speedb/.github/workflows/qa-tests.yml@main
  
  Fuzz:
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    needs: [Build]
    uses: ./.github/workflows/test_fuzz.yml
  
  Windows-build-test:
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    needs: [Build]
    uses: ./.github/workflows/build_windows.yml
    with:
      verSion: ' '
    secrets:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_BUCKET: ${{ secrets.AWS_BUCKET }}  
        

  Macos-build:
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    needs: [Build]
    uses: ./.github/workflows/build_macos.yml
    with:
      verSion: ' '   
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_BUCKET: ${{ secrets.AWS_BUCKET }}

  Linux-build:
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    needs: [Build]
    runs-on: ubuntu-latest

    container:
      image: centos:7.9.2009

    steps:
      - name: pre
        run: |
          yum install -y centos-release-scl epel-release
          yum install -y make devtoolset-11-gcc-c++ \
            coreutils wget unzip which git python3 openssl openssl-devel \
            libzstd-devel lz4-devel snappy-devel zlib-devel readline-devel \
            java-1.8.0-openjdk-devel
          echo "PATH=/opt/rh/devtoolset-11/root/usr/bin:${PATH}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF_NAME#speedb/v}" >> $GITHUB_ENV

      - name: Install CMake
        run: |
          CMAKE_RELEASE=3.20.1
          wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_RELEASE}/cmake-${CMAKE_RELEASE}.tar.gz
          tar xf cmake-${CMAKE_RELEASE}.tar.gz
          cd cmake-${CMAKE_RELEASE}
          ./bootstrap
          make -j$(nproc) && make install

      - uses: actions/checkout@v3

      - run: mkdir "$GITHUB_WORKSPACE/out"

      - name: Build and package release libraries
        run: |
          rm -rf build && mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSPDB_RELEASE_BUILD=1 -DPORTABLE=1 -DWITH_GFLAGS=0 -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1
          
      - name: Build Jar
        run: |
          make clean
          SPDB_RELEASE_BUILD=1 LIB_MODE=static DEBUG_LEVEL=0 PORTABLE=1 JAVA_HOME=/usr/lib/jvm/java-openjdk make -j$(nproc) rocksdbjavastatic
         
      - name: Build db_bench
        run: |
          yum install -y gflags-devel
          rm -rf build && mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DSPDB_RELEASE_BUILD=1 -DPORTABLE=1 -DWITH_GFLAGS=1 \
            -DWITH_SNAPPY=1 -DWITH_LZ4=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1 \
            -DWITH_BENCHMARK_TOOLS=1 -DROCKSDB_BUILD_SHARED=1
          make -j$(nproc) db_bench


  Linux-Arm-build:
    if: ${{ (always() && !failure() && !cancelled()) && (github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release')) }}
    needs: [Build]
    runs-on: ubuArm64G 
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"  
    
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

    - name: 'Build_on_Arm_Centos'
      run: |
        export SPDB_LIB_DIR=~/spdb_lib &&  mkdir -p $SPDB_LIB_DIR
        case "$GITHUB_EVENT_NAME" in 
          "pull_request")  
            echo "this workflow was triggered by a pull request"
            echo "the branch can not be used, it is $GITHUB_REF_NAME , instead ${{ github.head_ref }} will be used"
            docker run --rm -v $(readlink -f ${SPDB_LIB_DIR}):/out -i speedb-centos-builder ${{ github.head_ref }}
            ;;
          "workflow_dispatch") 
            echo "this workflow was triggered by a workflow dispatch, we will use the ref_name instead of the merge branch"
            echo " consider using github.ref, the branch that will be used here: " ${{ github.ref_name }}
            docker run --rm -v $(readlink -f ${SPDB_LIB_DIR}):/out -i speedb-centos-builder ${{ github.ref_name }}
            ;;
          "pull_request_review")  
            echo "this workflow was triggered by a pull request review"
            echo "the branch can not be used, it is $GITHUB_REF_NAME , instead  ${{ github.event.pull_request.head.ref }} will be used"
            docker run --rm -v $(readlink -f ${SPDB_LIB_DIR}):/out -i speedb-centos-builder ${{ github.event.pull_request.head.ref }}
            ;;
        esac   
   
  CI-all:
    if: ${{ github.event.review.state == 'approved' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release') }}
    needs: [Check-Licence-And-History, Build, QA-Tests, Fuzz, Linux-Arm-build, Linux-build, Macos-build, Windows-build-test]
    runs-on: ubuntu-latest
    steps:
    - name: Summary
      run: |
        echo "All tests passed"
        exit 0
